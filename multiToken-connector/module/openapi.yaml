openapi: 3.0.0
servers:
  - url: 'https://api-eu1.tatum.io'
info:
  version: 1.0.1
  title: Tatum Multi Token Abstraction API
tags:
  - description: |
      <p>Multi Token (ERC-1155|) is a type of contract where multiple NFT or "non-fungible token" can be deployed with FT "Fungible Tokens". Non-fungible means that each token is unique and irreplaceable while Fungible tokens are tokens that have same value. This principle gives Multi Token their value and gives rise to a wide range of interesting potential use cases.<br/>
      Multi Tokens can be used for nearly any digital asset or good to ensure authenticity and scarcity. The possibilities are endless, but here are a few example use cases:
      <ul>
      <li><b>In-game assets</b> - Multi Tokens can be used to create unique collectibles in the form of characters, weapons, skins, or other equipment. Players can resell or trade assets directly as they choose, and their authenticity is easily verifiable. No more eBay, no more scammers.</li>
      <li><b>Music and other digital media</b> - Multi Tokens can be used to create rare and unique collectible digital releases. Similarly, NFTs can be used to sell videos, art, or any other type of digital media. Collectors can own digital originals of their favorite songs, movies, or virtually anything else you can imagine.</li>
      <li><b>Digital sports merch</b> - Trading cards, memorabilia, classic moments in sports history, and one-of-a-kind experiences can also be sold as NFTs, opening up a world of possibilities for sports leagues and teams worldwide. The NBA Top Shot website sells collectible “moments” from the league’s history, and at the time of writing, the website is completely sold out and closed for new sign-ups.</li>
      <br/>
      These endpoints wraps up standard Multi Token implementation and operations, which can be done with them. Endpoints are blockchain agnostic, the only differentatior is the <b>chain</b> parameter in the URL path.<br/><br/>
      Tatum now supports Multi Token on these blockchains:<br/>
      <ul>
      <li><b>Ethereum</b></li>
      <li><b>Polygon (Matic)</b></li>
      <li><b>Kcc (KCS)</b></li>
      <li><b>Celo</b></li>
      <li><b>Harmony.ONE</b></li>
      <li><b>Binance Smart Chain</b></li>
      <li><b>Algorand</b></li>
      </ul>
      </p>
    name: Blockchain / Multi Token (ERC-1155)
paths:
  /v3/multitoken/deploy:
    post:
      description: |
        <p>Deploy Multi Token Smart Contract. This method creates new ERC1155 Smart Contract (Multi Tokens) on the blockchain. Smart contract is standardized and audited.
        It is possible to mint, burn and transfer tokens. It is also possible to mint multiple tokens at once.<br/>
        Tatum now supports Multi Tokens on these blockchains:<br/>
        <ul>
        <li><b>Ethereum</b></li>
        <li><b>Polygon (Matic)</b></li>
        <li><b>Kcc (KCS)</b></li>
        <li><b>Celo</b></li>
        <li><b>Harmony.ONE</b></li>
        <li><b>Binance Smart Chain</b></li>
        </ul>

        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
        Alternatively, using the Tatum client library for supported languages.
        </p>
      operationId: DeployMultiToken
      parameters:
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/DeployMultiToken"
                - $ref: "#/components/schemas/DeployMultiTokenKMS"
                - $ref: "#/components/schemas/DeployMultiTokenCelo"
                - $ref: "#/components/schemas/DeployMultiTokenCeloKMS"
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TransactionHashKMS"
                  - $ref: "#/components/schemas/SignatureId"
          description: OK
        400: &API400
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.
        401: &API401
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error401NotActive"
                  - $ref: "#/components/schemas/Error401Invalid"
          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.
        403: &API403
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403"
        500: &API500
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500"
          description: Internal server error. There was an error on the server during the processing of the request.
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Deploy Multi Token Smart Contract.
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/mint:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Mint a fixed amount of Multi Token and transfer it to destination account. Create and transfer any Multi Token token from smart contract defined in contractAddress.
        It is possible to add Metadata to the created token with a more detailed information about it.<br/><br/>
        Tatum now supports Multi Token these blockchains:<br/>
        <ul>
        <li><b>Ethereum</b></li>
        <li><b>Polygon (Matic)</b></li>
        <li><b>Kcc (KCS)</b></li>
        <li><b>Celo</b></li>
        <li><b>Harmony.ONE</b></li>
        <li><b>Binance Smart Chain</b></li>
        <li><b>Algorand</b></li>
        </ul>
        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
        Alternatively, using the Tatum client library for supported languages.
        </p>
      operationId: MintMultiToken
      parameters:
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/MintMultiToken"
                - $ref: "#/components/schemas/MintMultiTokenKMS"
                - $ref: "#/components/schemas/MintMultiTokenCelo"
                - $ref: "#/components/schemas/MintMultiTokenKMSCelo"
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TransactionHashKMS"
                  - $ref: "#/components/schemas/SignatureId"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403Celo"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Mint Multi Token
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/mint/batch:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Create a fixed amount of multiple Multi Tokens Tokens and transfer them to destination account in one transaction. Create and transfer Multi Tokens tokens from smart contract defined in contractAddress.<br/><br/>
        Tatum now supports Multi Tokens on these blockchains:<br/>
        <ul>
        <li><b>Ethereum</b></li>
        <li><b>Polygon (Matic)</b></li>
        <li><b>Kcc (KCS)</b></li>
        <li><b>Celo</b></li>
        <li><b>Harmony.ONE</b></li>
        <li><b>Binance Smart Chain</b></li>
        </ul>
        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
        Alternatively, using the Tatum client library for supported languages.
        </p>
      operationId: MintMultiTokenBatch
      parameters:
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/MintMultiTokenBatch"
                - $ref: "#/components/schemas/MintMultiTokenBatchKMS"
                - $ref: "#/components/schemas/MintMultiTokenBatchCelo"
                - $ref: "#/components/schemas/MintMultiTokenBatchKMSCelo"
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TransactionHashKMS"
                  - $ref: "#/components/schemas/SignatureId"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403Celo"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Mint Multi Token Batch
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/burn:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Burn a fixed amount of Multi Tokens by id. This method destroys Multi Tokens from smart contract defined in contractAddress.<br/><br/>
        Tatum now supports Multi Token these blockchains:<br/>
        <ul>
        <li><b>Ethereum</b></li>
        <li><b>Polygon (Matic)</b></li>
        <li><b>Kcc (Matic)</b></li>
        <li><b>Celo</b></li>
        <li><b>Harmony.ONE</b></li>
        <li><b>Binance Smart Chain</b></li>
        <li><b>Algorand</b></li>
        </ul>
        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
        Alternatively, using the Tatum client library for supported languages.
        </p>
      operationId: BurnMultiToken
      parameters:
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/BurnMultiToken"
                - $ref: "#/components/schemas/BurnMultiTokenKMS"
                - $ref: "#/components/schemas/BurnMultiTokenCelo"
                - $ref: "#/components/schemas/BurnMultiTokenKMSCelo"
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TransactionHashKMS"
                  - $ref: "#/components/schemas/SignatureId"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403Celo"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Burn Multi Token
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/burn/batch:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Burn multiple Multi Token Tokens by id assigned to same address in one transaction. This method destroys any Multi Tokens token from smart contract defined in contractAddress.<br/><br/>
        Tatum now supports Multi Tokens these blockchains:<br/>
        <ul>
        <li><b>Ethereum</b></li>
        <li><b>Polygon (Matic)</b></li>
        <li><b>Kcc (KCS)</b></li>
        <li><b>Celo</b></li>
        <li><b>Harmony.ONE</b></li>
        <li><b>Binance Smart Chain</b></li>
        </ul>
        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
        Alternatively, using the Tatum client library for supported languages.
        </p>
      operationId: BurnMultiTokenBatch
      parameters:
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/BurnMultiTokenBatch"
                - $ref: "#/components/schemas/BurnMultiTokenBatchKMS"
                - $ref: "#/components/schemas/BurnMultiTokenBatchCelo"
                - $ref: "#/components/schemas/BurnMultiTokenBatchKMSCelo"
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TransactionHashKMS"
                  - $ref: "#/components/schemas/SignatureId"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403Celo"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Burn Multi Token Batch
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/transaction:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Transfer a certain amount of Multi Token from account to another account. Transfer Multi Tokens token from smart contract defined in contractAddress.
        Only 1 specific token with specified tokenId and value can be transfered. This method invokes ERC1155 method safeTransfer() to transfer the token in case of ETH, Celo and BSC.<br/><br/>
        Tatum now supports Multi Token these blockchains:<br/>
        <ul>
        <li><b>Ethereum</b></li>
        <li><b>Polygon (Matic)</b></li>
        <li><b>Kcc (KCS)</b></li>
        <li><b>Celo</b></li>
        <li><b>Harmony.ONE</b></li>
        <li><b>Binance Smart Chain</b></li>
        <li><b>Algorand</b></li>
        </ul>
        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
        Alternatively, using the Tatum client library for supported languages.
        </p>
      operationId: TransferMultiToken
      parameters:
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/TransferMultiToken"
                - $ref: "#/components/schemas/TransferMultiTokenCelo"
                - $ref: "#/components/schemas/TransferMultiTokenKMS"
                - $ref: "#/components/schemas/TransferMultiTokenKMSCelo"
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TransactionHashKMS"
                  - $ref: "#/components/schemas/SignatureId"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403Celo"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Transfer Multi Token Token
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/transaction/batch:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Transfer Multi Token Batch from account to various other accounts in one transaction. Transfer multiple Multi Tokens token from smart contract defined in contractAddress.
        Multiple token with specified tokenIds and values can be transfered. This method invokes ERC1155 method safeTransfer() to transfer the token in case of ETH, Celo and BSC.<br/><br/>
        Tatum now supports Multi Tokens these blockchains:<br/>
        <ul>
        <li><b>Ethereum</b></li>
        <li><b>Polygon (Matic)</b></li>
        <li><b>Kcc (KCS)</b></li>
        <li><b>Celo</b></li>
        <li><b>Harmony.ONE</b></li>
        <li><b>Binance Smart Chain</b></li>
        </ul>
        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
        Alternatively, using the Tatum client library for supported languages.
        </p>
      operationId: TransferMultiTokenBatch
      parameters:
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/TransferMultiTokenBatch"
                - $ref: "#/components/schemas/TransferMultiTokenBatchKMS"
                - $ref: "#/components/schemas/TransferMultiTokenBatchCelo"
                - $ref: "#/components/schemas/TransferMultiTokenBatchKMSCelo"
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TransactionHashKMS"
                  - $ref: "#/components/schemas/SignatureId"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403Celo"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Transfer Multi Token Batch
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/mint/add:
    post:
      description: |
        <h4>2 credits per API call.</h4><br/>
        <p>Add Multi Token minter.<br/><br/>
        Tatum now supports Multi Tokens these blockchains:<br/>
        <ul>
        <li><b>Ethereum</b></li>
        <li><b>Polygon (Matic)</b></li>
        <li><b>Kcc (KCS)</b></li>
        <li><b>Celo</b></li>
        <li><b>Harmony.ONE</b></li>
        <li><b>Binance Smart Chain</b></li>
        </ul>
        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.
        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and loss of funds. In this method, it is possible to enter privateKey
        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,
        <a href="https://github.com/tatumio/tatum-kms" target="_blank">Tatum KMS</a> should be used for the highest security standards, and signatureId should be present in the request.
        Alternatively, using the Tatum client library for supported languages.
        </p>
      operationId: AddMultiTokenMinter
      parameters:
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/AddMultiTokenMinter"
                - $ref: "#/components/schemas/AddMultiTokenMinterKMS"
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TransactionHashKMS"
                  - $ref: "#/components/schemas/SignatureId"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403Celo"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Add Multi Token miter
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/transaction/{chain}/{address}/{tokenAddress}:
    get:
      description: "<h4>1 credit per API call.</h4><br/><p>Get Multi Token (ERC-1155) transactions by address. This includes incoming and outgoing transactions for the address.</p>"
      operationId: MultiTokenGetTransactionByAddress
      parameters:
        - description: "Blockchain to work with"
          in: path
          name: chain
          required: true
          schema:
            type: string
            enum:
              - CELO
            example: CELO
        - description: "Account address"
          in: path
          name: address
          required: true
          schema:
            type: string
            example: "0x8ce4e40889a13971681391aad29e88efaf91f784"
        - description: "Token address"
          in: path
          name: tokenAddress
          required: true
          schema:
            type: string
            example: "0x1ce4e40889a13971681391aad29e88efaf91f784"
        - description: Max number of items per page is 50.
          in: query
          name: pageSize
          schema:
            type: number
            example: 10
            maximum: 50
            minimum: 1
          required: true
        - description: Offset to obtain next page of the data.
          in: query
          name: offset
          schema:
            type: number
            example: 0
        - description: Transactions from this block onwords will be included.
          in: query
          name: from
          schema:
            type: number
            minimum: 0
            example: 1087623
        - description: Transactions up to this block will be included.
          in: query
          name: to
          schema:
            type: number
            minimum: 0
            example: 1087823
        - description: Sorting of the data. ASC - oldest first, DESC - newest first.
          in: query
          name: sort
          schema:
            type: string
            default: DESC
            example: ASC
            enum:
              - ASC
              - DESC
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/MultiTx"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Get Multi Token transactions by address
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/address/{chain}/{hash}:
    get:
      description: |
        <h4>1 credit per API call.</h4><br/>
        <p>Get Multi Token contract address from deploy transaction. This method is deprecated, use <a href="#operation/SCGetContractAddress">Get contract address</a> instead.</p>
      deprecated: true
      operationId: MultiTokenGetContractAddress
      parameters:
        - description: Blockchain to work with
          in: path
          name: chain
          required: true
          schema:
            type: string
            enum:
              - ETH
              - MATIC
              - KCS
              - ONE
              - CELO
              - BSC
        - description: "Transaction hash"
          in: path
          name: hash
          required: true
          schema:
            type: string
            example: "0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7"
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  contractAddress:
                    type: string
                    description: Address of the Multi Token token.
                    example: "0xc21C81ef03f98898Fb155E00C364e8a7b9D158b8"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403TxNotFound"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Get Contract address
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/transaction/{chain}/{hash}:
    get:
      description: "<h4>1 credit per API call.</h4><br/><p>Get Multi Token transaction by transaction hash.</p>"
      operationId: MultiTokenGetTransaction
      parameters:
        - description: Blockchain to work with
          in: path
          name: chain
          required: true
          schema:
            type: string
            enum:
              - ETH
              - MATIC
              - KCS
              - ONE
              - CELO
              - BSC
        - description: "Transaction hash"
          in: path
          name: hash
          required: true
          schema:
            type: string
            example: "0xe6e7340394958674cdf8606936d292f565e4ecc476aaa8b258ec8a141f7c75d7"
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/CeloTx"
                  - $ref: "#/components/schemas/EthTx"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Error403TxNotFound"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Get Transaction
      tags:
        - Blockchain / Multi Token (ERC-1155)
#  /v3/multitoken/address/balance/{chain}/{address}:
#    get:
#      description: |
#        <h4>1 credit per API call.</h4><br/><p>Get Multi Tokens on address. Returns all tokenIDs of all contracts this address holds.</p>
#      operationId: MultiTokenGetAddressBalance
#      parameters:
#        - description: Blockchain to work with
#          in: path
#          name: chain
#          required: true
#          schema:
#            type: string
#            enum:
#              - ETH
#              - MATIC
#              - CELO
#            example: ETH
#        - description: "Blockchain address"
#          in: path
#          name: address
#          required: true
#          schema:
#            type: string
#            example: "0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B"
#        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
#          in: header
#          name: x-testnet-type
#          required: false
#          schema:
#            default: ethereum-ropsten
#            type: string
#            enum:
#              - ethereum-ropsten
#              - ethereum-rinkeby
#            maxLength: 10
#      responses:
#        200:
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  type: object
#                  properties:
#                    contractAddress:
#                      type: string
#                      example: "0x771987a5add0ef1ce303aa069df82dd7f8fbb33b"
#                      description: Contract address of the Multi Token
#                    balances:
#                      type: array
#                      items:
#                        type: object
#                        properties:
#                          tokenId:
#                            type: string
#                            description: Token ID.
#                            example: "10"
#                          amount:
#                            type: string
#                            description: Number of tokens held by the address.
#                            example: "17"
#          description: OK
#        400:
#          <<: *API400
#        401:
#          <<: *API401
#        403:
#          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Error403Celo"
#        500:
#          <<: *API500
#      security:
#        - X-Api-Key: [ ]
#      x-code-samples:
#      summary: Get Multi Tokens by Address
#      tags:
#        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/balance/{chain}/{contractAddress}/{address}/{tokenId}:
    get:
      description: |
        <h4>1 credit per API call.</h4><br/><p>Get Multi Tokens on Account. Returns tokenIDs of tokens Account holds.</p>
      operationId: MultiTokenGetBalance
      parameters:
        - description: Blockchain to work with
          in: path
          name: chain
          required: true
          schema:
            type: string
            enum:
              - ETH
              - MATIC
              - KCS
              - ONE
              - CELO
              - BSC
        - description: "Account address"
          in: path
          name: address
          required: true
          schema:
            type: string
            example: "0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B"
        - description: "Multi Token contract address"
          in: path
          name: contractAddress
          required: true
          schema:
            type: string
            example: "0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326"
        - description: "Multi Token tokenID"
          in: path
          name: tokenId
          required: true
          schema:
            type: string
            example: "100"
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Token ID.
                  example: "10"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error403Celo"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Get Multi Token Account balance
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/balance/batch/{chain}/{contractAddress}:
    get:
#      deprecated: true
      description: |
        <h4>1 credit per API call.</h4><br/><p>Get Multi Tokens on Account. Returns tokenIDs of tokens Account holds.</p>
#        <h4>1 credit per API call.</h4><br/><p>Get Multi Tokens on Account. Returns tokenIDs of tokens Account holds. This method is deprecated, use <a href="#operation/MultiTokenGetAddressBalance">Get contract address</a> instead.</p>
      operationId: MultiTokenGetBalanceBatch
      parameters:
        - description: Blockchain to work with
          in: path
          name: chain
          required: true
          schema:
            type: string
            enum:
              - ETH
              - MATIC
              - KCS
              - ONE
              - CELO
              - BSC
        - description: "Multi Token contract address"
          in: path
          name: contractAddress
          required: true
          schema:
            type: string
            example: "0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326"
        - description: "Comma separated TokenIds to get balance for"
          in: query
          name: tokenId
          required: true
          schema:
            type: string
            example: "1,2,3"
        - description: "Comma separated addresses to get balance for"
          in: query
          name: address
          required: true
          schema:
            type: string
            example: "0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B,0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B,0x3223AEB8404C7525FcAA6C512f91e287AE9FfE7B"
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                example: ["10","20"]
                items:
                  type: string
                  description: Token ID.
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error403Celo"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Get Multi Token Account balance Batch
      tags:
        - Blockchain / Multi Token (ERC-1155)
  /v3/multitoken/metadata/{chain}/{contractAddress}/{token}:
    get:
      description: "<h4>1 credit per API call.</h4><br/><p>Get Multi Token metadata.</p>"
      operationId: MultiTokenGetMetadata
      parameters:
        - description: Blockchain to work with
          in: path
          name: chain
          required: true
          schema:
            type: string
            enum:
              - ETH
              - MATIC
              - KCS
              - ONE
              - CELO
              - BSC
        - description: "Token ID"
          in: path
          name: token
          required: true
          schema:
            type: string
            example: "1"
            maxLength: 32
        - description: "Multi Token contract address"
          in: path
          name: contractAddress
          required: true
          schema:
            type: string
            example: "0x94Ce79B9F001E25BBEbE7C01998A78F7B27D1326"
        - description: "Type of testnet. Defaults to ropsten. Valid only for ETH invocations."
          in: header
          name: x-testnet-type
          required: false
          schema:
            default: ethereum-ropsten
            type: string
            enum:
              - ethereum-ropsten
              - ethereum-rinkeby
            maxLength: 10
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    description: Metadata associated with token.
                    example: "https://my_token_data.com"
          description: OK
        400:
          <<: *API400
        401:
          <<: *API401
        403:
          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error403Celo"
        500:
          <<: *API500
      security:
        - X-Api-Key: [ ]
      x-code-samples:
      summary: Get Multi Token Token Metadata
      tags:
        - Blockchain / Multi Token (ERC-1155)
components:
  securitySchemes:
    X-Api-Key:
      description: |
        To maintain the highest security level, Tatum requires X-API-Key HTTP header.
        This X-API-Key represents identification of the plan and can be used by 1 developer or per environment.
        Each X-API-Key is bound to the test or production blockchains.
      in: header
      name: x-api-key
      type: apiKey
  schemas:
    TransferMultiTokenCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        tokenId:
          description: ID of token.
          example: "100000"
          type: string
          maxLength: 256
        amount:
          description: Amount of token.
          example: "100000"
          type: string
          maxLength: 256
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - to
        - contractAddress
        - tokenId
        - fromPrivateKey
    MultiTx:
      type: object
      properties:
        blockNumber:
          type: number
          example: 6541235
          description: Block number
        txId:
          type: string
          example: "0x955c1037608c7aecb6d1a3f150ce7d0a80536bcabb0deb69d62f55292cc4c372"
          description: Transaction ID
        contractAddress:
          type: string
          example: "0x4f54fAD27F7F46C102Cd49b8E75C5593397cd9c3"
          description: Contract address
        tokenId:
          type: string
          example: "1"
          description: ID of the token
        amount:
          type: string
          example: "1"
          description: Amount of tokens transferred.
        from:
          type: string
          example: "0x780c3de0aba1b51f04cfe8a5d9d277d4ad032b8d"
          description: Sender
        operator:
          type: string
          example: "0x780c3de0aba1b51f04cfe8a5d9d277d4ad032b8d"
          description: Operator
        to:
          type: string
          example: "0x8cb76aed9c5e336ef961265c6079c14e9cd3d2ea"
          description: recipient
      required:
        - blockNumber
        - txId
        - contractAddress
        - tokenId
        - from
        - to
        - amount
        - operator
    TransferMultiTokenBatchCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        tokenId:
          description: ID of token.
          example: ["100000"]
          type: array
          items:
            type: string
            maxLength: 32
        amounts:
          description: Amount of token to be transferred
          example: ["100000"]
          type: array
          items:
            type: string
            maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - to
        - contractAddress
        - tokenId
        - amounts
        - fromPrivateKey
    DeployMultiTokenCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        uri:
          description: URI of the Multi Token contract
          example: example.com
          maxLength: 100
          minLength: 1
          type: string
        fromPrivateKey:
          description: Private key of account address, from which gas for deployment of ERC1155 will be paid. Private key, or signature Id must be present.
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - uri
        - feeCurrency
        - fromPrivateKey
    DeployMultiTokenCeloKMS:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        uri:
          description: URI of the Multi Token contract
          example: example.com
          maxLength: 100
          minLength: 1
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - uri
        - feeCurrency
        - signatureId
    MintMultiTokenBatchKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        to:
          type: array
          description: Blockchain address to send Multi Token token to.
          example: [ "0x687422eEA2cB73B5d3e242bA5456b782919AFc85" ]
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example: [[ "100000","100001" ]]
          items:
            type: array
            items:
              type: string
              maxLength: 32
        amounts:
          type: array
          description: ID of token to be created.
          example: [[ "100","100" ]]
          items:
            type: array
            items:
              type: string
              maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - to
        - contractAddress
        - feeCurrency
        - tokenId
        - amounts
        - signatureId
    BurnMultiTokenCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: "0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f"
          type: string
        tokenId:
          description: ID of token to be destroyed.
          example: "100000"
          type: string
          maxLength: 32
        amount:
          description: amount of token to be destroyed.
          example: "100000"
          type: string
          maxLength: 32
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - contractAddress
        - feeCurrency
        - fromPrivateKey
        - tokenId
        - amount
        - account
    BurnMultiTokenBatchCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: "0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f"
          type: string
        tokenId:
          description: ID of token to be destroyed.
          example: ["100000"]
          type: array
          items:
            type: string
            maxLength: 32
        amounts:
          description: amounts of token to be destroyed.
          example: ["100000"]
          type: array
          items:
            type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - contractAddress
        - feeCurrency
        - fromPrivateKey
        - tokenId
        - amounts
        - account
    BurnMultiTokenKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: "0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f"
          type: string
        tokenId:
          description: ID of token to be destroyed.
          example: "100000"
          type: string
          maxLength: 32
        amount:
          description: amount of token to be destroyed.
          example: "100000"
          type: string
          maxLength: 32
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - feeCurrency
        - contractAddress
        - tokenId
        - amount
        - signatureId
        - account
    AddMultiTokenMinterKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - MATIC
            - KCS
            - CELO
            - ONE
            - BSC
        contractAddress:
          maxLength: 43
          minLength: 42
          description: Address of MultiToken token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        minter:
          maxLength: 43
          minLength: 42
          description: Address of MultiToken minter
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas, only valid for CELO chain.
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - url
        - contractAddress
        - minter
        - signatureId
    AddMultiTokenMinter:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - MATIC
            - KCS
            - CELO
            - ONE
            - BSC
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of MultiToken token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        minter:
          maxLength: 42
          minLength: 42
          description: Address of MultiToken minter
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Ethereum transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas, only valid for CELO chain.
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - minter
        - chain
        - url
        - contractAddress
        - fromPrivateKey
    BurnMultiTokenBatchKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: "0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f"
          type: string
        tokenId:
          description: IDs of token to be destroyed.
          example: ["100000"]
          type: array
          items:
            type: string
            maxLength: 32
        amounts:
          description: amounts of token to be destroyed.
          example: ["100000"]
          type: array
          items:
            type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - feeCurrency
        - contractAddress
        - tokenId
        - amount
        - account
        - signatureId
    TransferMultiTokenKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        tokenId:
          description: ID of token.
          example: "100000"
          type: string
          maxLength: 256
        amount:
          description: amount of token.
          example: "100000"
          type: string
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - to
        - contractAddress
        - feeCurrency
        - signatureId
        - tokenId
        - amount
    TransferMultiTokenBatchKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        tokenId:
          description: ID of token.
          example: ["100000"]
          type: array
          items:
            type: string
        amounts:
          description: amounts of token.
          example: ["100000"]
          type: array
          items:
            type: string
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - to
        - contractAddress
        - feeCurrency
        - signatureId
        - tokenId
        - amounts
    MintMultiTokenCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        tokenId:
          description: ID of token to be created.
          example: "100000"
          type: string
          maxLength: 32
        amount:
          description: amount of token to be created.
          example: "100000"
          type: string
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - to
        - tokenId
        - amount
        - feeCurrency
        - contractAddress
        - fromPrivateKey
    MintMultiTokenBatchCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        tokenId:
          type: array
          description: ID of token to be created.
          example: [[ "100000","100001" ]]
          items:
            type: array
            items:
              type: string
              maxLength: 32
        amounts:
          type: array
          description: ID of token to be created.
          example: [[ "100","100" ]]
          items:
            type: array
            items:
              type: string
              maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: ['0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f']
          type: array
          items:
            type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - to
        - tokenId
        - amounts
        - feeCurrency
        - contractAddress
        - fromPrivateKey
    MintMultiTokenKMSCelo:
      type: object
      properties:
        chain:
          type: string
          example: CELO
          description: Chain to work with.
          enum:
            - CELO
        tokenId:
          description: ID of token to be created.
          example: "100000"
          type: string
          maxLength: 32
        amount:
          description: amount of token to be created.
          example: "100000"
          type: string
          maxLength: 32
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to Celo transaction. If not present, last known nonce will be used.
        feeCurrency:
          type: string
          description: Currency to pay for transaction gas
          enum:
            - CELO
            - CUSD
            - CEUR
      required:
        - chain
        - to
        - tokenId
        - amount
        - feeCurrency
        - contractAddress
        - signatureId
    TransferMultiToken:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
            - ALGO
        to:
          maxLength: 58
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        tokenId:
          description: ID of token.
          example: "100000"
          type: string
          maxLength: 256
        amount:
          description: amount of token.
          example: "100000"
          type: string
          maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 1
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 103
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - to
        - chain
        - contractAddress
        - tokenId
        - fromPrivateKey
    TransferMultiTokenBatch:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        tokenId:
          description: ID of token.
          example: ["100000"]
          type: array
          items:
            type: string
            maxLength: 256
        amounts:
          description: amounts of token.
          example: ["100000"]
          type: array
          items:
            type: string
            maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - to
        - chain
        - contractAddress
        - tokenId
        - amounts
        - fromPrivateKey
    DeployMultiToken:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
        uri:
          description: URI of the Multi Token token
          example: example.com
          type: string
        fromPrivateKey:
          description: Private key of account address, from which gas for deployment of ERC1155 will be paid. Private key, or signature Id must be present.
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - uri
        - chain
        - fromPrivateKey
    DeployMultiTokenKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
        uri:
          description: URI of the Multi Token token
          example: example.com
          type: string
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - uri
        - chain
        - signatureId
    TransferMultiTokenKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        tokenId:
          description: ID of token.
          example: "100000"
          type: string
          maxLength: 256
        amount:
          description: amount of token.
          example: "100000"
          type: string
          maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - to
        - chain
        - contractAddress
        - signatureId
        - tokenId
        - amount
    TransferMultiTokenBatchKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        tokenId:
          description: ID of token.
          example: ["100000"]
          type: array
          items:
            type: string
            maxLength: 256
        amount:
          description: amount of token.
          example: ["100000"]
          type: array
          maxLength: 256
          items:
            type: string
            maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          example: 1
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - to
        - chain
        - contractAddress
        - signatureId
        - tokenId
        - amount
    MintMultiToken:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
            - ALGO
        tokenId:
          description: ID of token to be created.
          example: "100000"
          type: string
          maxLength: 32
        to:
          maxLength: 58
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 1
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        amount:
          description: amount of token to be created.
          example: "100000"
          type: string
          maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - to
        - chain
        - url
        - contractAddress
        - fromPrivateKey
        - tokenId
        - amount
    MintMultiTokenKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
        tokenId:
          description: ID of token to be created.
          example: "100000"
          type: string
          maxLength: 32
        to:
          maxLength: 42
          minLength: 42
          description: Blockchain address to send Multi Token token to
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        amount:
          description: amount of token to be created.
          example: "100000"
          type: string
          maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - to
        - chain
        - url
        - contractAddress
        - signatureId
        - tokenId
        - amount
    MintMultiTokenBatch:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
        to:
          type: array
          description: Blockchain address to send Multi Token token to.
          example: [ "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"]
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example: [[ "100000","100001" ]]
          items:
            type: array
            items:
              type: string
              maxLength: 32
        amounts:
          type: array
          description: ID of token to be created.
          example: [[ "100","100" ]]
          items:
            type: array
            items:
              type: string
              maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - to
        - chain
        - url
        - contractAddress
        - fromPrivateKey
        - tokenId
        - amounts
    MintMultiTokenBatchKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
        to:
          type: array
          description: Blockchain address to send Multi Token token to.
          example: [ "0x687422eEA2cB73B5d3e242bA5456b782919AFc85" ]
          items:
            maxLength: 42
            minLength: 42
            type: string
        tokenId:
          type: array
          description: ID of token to be created.
          example: [[ "100000","100001" ]]
          items:
            type: array
            items:
              type: string
              maxLength: 32
        amounts:
          type: array
          description: ID of token to be created.
          example: [[ "100","100" ]]
          items:
            type: array
            items:
              type: string
              maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - to
        - chain
        - contractAddress
        - tokenId
        - url
        - signatureId
        - amounts
    BurnMultiToken:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
            - ALGO
        account:
          maxLength: 58
          minLength: 42
          description: Address of holder
          example: "0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f"
          type: string
        tokenId:
          description: ID of token to be destroyed.
          example: "100000"
          type: string
          maxLength: 32
        contractAddress:
          maxLength: 42
          minLength: 1
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 103
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        amount:
          description: amount of token to be destroyed.
          example: "100000"
          type: string
          maxLength: 32
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - account
        - chain
        - contractAddress
        - fromPrivateKey
        - tokenId
        - amount
    BurnMultiTokenBatch:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: "0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f"
          type: string
        tokenId:
          description: ID of token to be destroyed.
          example: ["1000","1001"]
          type: array
          items:
            type: string
            maxLength: 32
        amounts:
          description: ID of token to be destroyed.
          example: ["10","10"]
          type: array
          items:
            type: string
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        fromPrivateKey:
          type: string
          maxLength: 66
          example: "0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2"
          minLength: 66
          description: Private key of sender address. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - account
        - amounts
        - chain
        - url
        - contractAddress
        - fromPrivateKey
        - tokenId
    BurnMultiTokenKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: "0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f"
          type: string
        tokenId:
          description: ID of token to be destroyed.
          example: "100000"
          type: string
          maxLength: 32
        amount:
          description: amount of token to be destroyed.
          example: "100"
          type: string
          maxLength: 32
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - account
        - chain
        - amount
        - contractAddress
        - tokenId
        - signatureId
    BurnMultiTokenBatchKMS:
      type: object
      properties:
        chain:
          type: string
          example: ETH
          description: Chain to work with.
          enum:
            - ETH
            - ONE
            - MATIC
            - KCS
            - BSC
        account:
          maxLength: 42
          minLength: 42
          description: Address of holder
          example: "0x4b812a77b109A150C2Fc89eD133EaBC78bC9EC8f"
          type: string
        tokenId:
          description: ID of token to be destroyed.
          example: ["100","101"]
          type: array
          items:
            type: string
            maxLength: 32
        amounts:
          description: ID of token to be destroyed.
          example: ["10","10"]
          type: array
          items:
            type: string
        data:
          description: Data in bytes
          example: "0x1234"
          type: string
        contractAddress:
          maxLength: 42
          minLength: 42
          description: Address of Multi Token token
          example: "0x687422eEA2cB73B5d3e242bA5456b782919AFc85"
          type: string
        index:
          type: number
          minimum: 0
          description: If signatureId is mnemonic-based, this is the index to the specific address from that mnemonic.
        signatureId:
          type: string
          minLength: 36
          maxLength: 36
          format: uuid
          example: 26d3883e-4e17-48b3-a0ee-09a3e484ac83
          description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.
        nonce:
          type: number
          minimum: 0
          description: Nonce to be set to transaction. If not present, last known nonce will be used.
        fee:
          description: Custom defined fee. If not present, it will be calculated automatically.
          type: object
          required:
            - gasLimit
            - gasPrice
          properties:
            gasLimit:
              type: string
              description: Gas limit for transaction in gas price.
              pattern: ^[+]?\d+$
              example: "40000"
            gasPrice:
              type: string
              description: Gas price in Gwei.
              pattern: ^[+]?\d+$
              example: "20"
      required:
        - account
        - chain
        - amount
        - contractAddress
        - tokenId
        - signatureId
